//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Beamable.Server.Clients
{
    using System;
    using Beamable.Platform.SDK;
    using Beamable.Server;
    
    
    /// <summary> A generated client for <see cref="Beamable.Spoons.Spoons"/> </summary
    public sealed class SpoonsClient : MicroserviceClient, Beamable.Common.IHaveServiceName
    {
        
        public SpoonsClient(BeamContext context = null) : 
                base(context)
        {
        }
        
        public string ServiceName
        {
            get
            {
                return "Spoons";
            }
        }
        
        /// <summary>
        /// Call the GetHouse method on the Spoons microservice
        /// <see cref="Beamable.Spoons.Spoons.GetHouse"/>
        /// </summary>
        public Beamable.Common.Promise<SpoonsCommon.ImageReference> GetHouse()
        {
            string[] serializedFields = new string[0];
            return this.Request<SpoonsCommon.ImageReference>("Spoons", "GetHouse", serializedFields);
        }
        
        /// <summary>
        /// Call the Start method on the Spoons microservice
        /// <see cref="Beamable.Spoons.Spoons.Start"/>
        /// </summary>
        public Beamable.Common.Promise<SpoonsCommon.Convo> Start(string message)
        {
            string serialized_message = this.SerializeArgument<string>(message);
            string[] serializedFields = new string[] {
                    serialized_message};
            return this.Request<SpoonsCommon.Convo>("Spoons", "Start", serializedFields);
        }
        
        /// <summary>
        /// Call the Continue method on the Spoons microservice
        /// <see cref="Beamable.Spoons.Spoons.Continue"/>
        /// </summary>
        public Beamable.Common.Promise<SpoonsCommon.Convo> Continue(SpoonsCommon.Convo convo, string message)
        {
            string serialized_convo = this.SerializeArgument<SpoonsCommon.Convo>(convo);
            string serialized_message = this.SerializeArgument<string>(message);
            string[] serializedFields = new string[] {
                    serialized_convo,
                    serialized_message};
            return this.Request<SpoonsCommon.Convo>("Spoons", "Continue", serializedFields);
        }
    }
    
    internal sealed class MicroserviceParametersSpoonsClient
    {
        
        [System.SerializableAttribute()]
        internal sealed class ParameterSystem_String : MicroserviceClientDataWrapper<string>
        {
        }
        
        [System.SerializableAttribute()]
        internal sealed class ParameterSpoonsCommon_Convo : MicroserviceClientDataWrapper<SpoonsCommon.Convo>
        {
        }
    }
    
    [BeamContextSystemAttribute()]
    public static class ExtensionsForSpoonsClient
    {
        
        [Beamable.Common.Dependencies.RegisterBeamableDependenciesAttribute()]
        public static void RegisterService(Beamable.Common.Dependencies.IDependencyBuilder builder)
        {
            builder.AddScoped<SpoonsClient>();
        }
        
        public static SpoonsClient Spoons(this Beamable.Server.MicroserviceClients clients)
        {
            return clients.GetClient<SpoonsClient>();
        }
    }
}
